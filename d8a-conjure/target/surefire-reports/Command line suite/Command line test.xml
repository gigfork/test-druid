<?xml version="1.0" encoding="UTF-8"?>
<testsuite hostname="wl-10-190-253-207.wireless.duke.edu" name="io.d8a.conjure.ChooseByWeightNodeListTest" tests="96" failures="0" timestamp="28 Mar 2013 18:03:00 GMT" time="0.527" errors="0">
  <testcase name="canBeRegisteredAsType" time="0.247" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="diesWhenRenderingNoNodes" time="0.0" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="generatesAllNodesOfSameWeightEventually" time="0.0010" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="generatesHigherWeightedNodesMoreOften" time="0.0" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="generatesLoneNodeRepeatedlyWhenOnlyOneAdded" time="0.0" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="nodeDistributionReflectsWeights" time="0.032" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="nodesOfDifferentWeightsCanBeAddedInAnyOrder" time="0.012" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="nodesOfSameWeightsCanBeAddedInAnyOrder" time="0.019" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="weightsCanSumToMoreThan100" time="0.0050" classname="io.d8a.conjure.ChooseByWeightNodeListTest"/>
  <testcase name="canBeReferencedInSampleGenerator" time="0.0010" classname="io.d8a.conjure.ChooseInOrderNodeListTest"/>
  <testcase name="canBeRegisteredAsType" time="0.0" classname="io.d8a.conjure.ChooseInOrderNodeListTest"/>
  <testcase name="cyclesBackToBeginning" time="0.0010" classname="io.d8a.conjure.ChooseInOrderNodeListTest"/>
  <testcase name="generateFailsIfNoNodesAdded" time="0.0" classname="io.d8a.conjure.ChooseInOrderNodeListTest"/>
  <testcase name="generatesNodesInOrderAdded" time="0.0" classname="io.d8a.conjure.ChooseInOrderNodeListTest"/>
  <testcase name="canBeReferencedInSampleGenerator" time="0.0010" classname="io.d8a.conjure.ChooseRandomNodeListTest"/>
  <testcase name="canBeRegisteredAsType" time="0.0" classname="io.d8a.conjure.ChooseRandomNodeListTest"/>
  <testcase name="eventuallyGeneratesAllNodes" time="0.0" classname="io.d8a.conjure.ChooseRandomNodeListTest"/>
  <testcase name="generateFailsIfNoNodesAdded" time="0.0" classname="io.d8a.conjure.ChooseRandomNodeListTest"/>
  <testcase name="generatesNodesFromProvidedList" time="0.0" classname="io.d8a.conjure.ChooseRandomNodeListTest"/>
  <testcase name="repeatsValuesOverTime" time="0.0" classname="io.d8a.conjure.ChooseRandomNodeListTest"/>
  <testcase name="appendsAllNodesInSingleGenerate" time="0.0" classname="io.d8a.conjure.CombineNodeListTest"/>
  <testcase name="canBeRegisteredAsType" time="0.0" classname="io.d8a.conjure.CombineNodeListTest"/>
  <testcase name="canSetSeparatorInConfig" time="0.0" classname="io.d8a.conjure.CombineNodeListTest"/>
  <testcase name="canSpecifySeparator" time="0.0010" classname="io.d8a.conjure.CombineNodeListTest"/>
  <testcase name="ignoresBlankLines" time="0.0030" classname="io.d8a.conjure.ConjureTemplateParserFixedDataTest"/>
  <testcase name="ignoresHashCommentLines" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserFixedDataTest"/>
  <testcase name="multipleFixedLinesAllCombineEachCall" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserFixedDataTest"/>
  <testcase name="singleFixedLineRepeats" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserFixedDataTest"/>
  <testcase name="canHaveWhitespaceBetweenCustomEndTokens" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyCustomDelimiter" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyCustomDelimiterAndSeparator" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyCustomEndToken" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyLinesShouldBeTrimmed" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyLinesShouldBeTrimmedForCombineNodes" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyThePrimarySampleNode" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="generatesValuesFromEachGroupAndCombinesWithNewlinesForEveryCall" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="parsesNodeListLines" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="stopsParsingNodeListAfterBlankLine" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserNodeListParsingTest"/>
  <testcase name="canSpecifyCustomClock" time="0.06" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="combineRegisteredByDefault" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="cycleRegisteredByDefault" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="failsForUnregisteredVariableTypes" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="linesCanHaveVariablesAndStillCombinesAllEachCall" time="0.0020" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="minMaxRegisteredByDefault" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="randomChoiceRegisteredByDefault" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="succeedsForFullyQualifiedTypes" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="timeRegisteredByDefault" time="0.0" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="weightedRegisteredByDefault" time="0.0010" classname="io.d8a.conjure.ConjureTemplateParserVariablesTest"/>
  <testcase name="allowsCustomSampleNodes" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="allowsDirectParseOfNodes" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="allowsMultipleTemplateReferences" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="allowsRegisteredNodeTemplateTypes" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="allowsRegisteringNodeTypesByClassName" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="allowsTemplatesToReferenceOthers" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="configRefsCanHaveNamesToo" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="customTypesCanBeFullClassNames" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="customTypesCanResolveReferences" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="defaultsToTemplateNamedSample" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="diesWhenAskedForDefaultTemplateIfNotYetAdded" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="diesWhenAskedForMissingTemplates" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="doesNotCareWhatOrderTemplatesAreAdded" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="failsWhenCustomTypeByClassNameNotFound" time="0.0010" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="mustSpecifyRefOrType" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="refIgnoredIfTypeDetailsSpecified" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="referencedValuesAreRememberedByDefaultWithinSingleRun" time="0.0020" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="referencedValuesCanBeConfiguredToNotRememberValues" time="0.0010" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="registersEmbeddedNodesWhenParsed" time="0.0010" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="rejectsDuplicateSampleNames" time="0.0010" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="setsTheFullTemplateToCustomNodeWhenTemplateContainsTheConfigOnly" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="shouldReturnBareValueForTemplatesWithoutReferences" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="supportsCustomRefDelimiters" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="templateReferencesCanBeAtTheBeginningOfTemplates" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="templateReferencesCanBeAtTheEndOfTemplates" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="templateReferencesCanBeTheWholeTemplate" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="templateRefsCanBeLongHand" time="0.0" classname="io.d8a.conjure.ConjureTemplateTest"/>
  <testcase name="allowsDateJitter" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="allowsFormat" time="0.042" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="allowsNegativeHighJitter" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="allowsNegativeLowJitter" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="allowsTimezone" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="canHaveSameJitterLowAndHigh" time="0.0010" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="canReferenceMinMaxForJitter" time="0.0010" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="fixesTransposedLowHigh" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="generatesSystemTimestamp" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="usesClockFromSampleGenerator" time="0.0" classname="io.d8a.conjure.DateNodeTypeTest"/>
  <testcase name="allowsNegativeForMax" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="allowsNegativeForMin" time="0.0010" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="canBeCreatedFromFactoryMethod" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="canHaveSameMinAndMax" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="createFailsMaxNotSpecified" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="createFailsMinNotSpecified" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="fixesTransposedMinMax" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="generatesAllValuesInRangeInclusive" time="0.0040" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="generatesNumberBetweenMinMax" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="templatesFailWhenAddedWithoutMax" time="0.0010" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
  <testcase name="templatesFailWhenAddedWithoutMin" time="0.0" classname="io.d8a.conjure.MinMaxNodeTypeTest"/>
</testsuite>
